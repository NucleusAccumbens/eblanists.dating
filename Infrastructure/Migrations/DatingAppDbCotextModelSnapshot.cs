// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(DatingAppDbCotext))]
    partial class DatingAppDbCotextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Entities.DatingAppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("HaveSacred")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsBdsmLover")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsChildfree")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCosmopolitan")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsExistLover")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsHeelsUser")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMakeupUser")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsNoncredist")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPansexual")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsTattooed")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVegan")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<bool?>("ShaveHead")
                        .HasColumnType("bit");

                    b.Property<bool?>("ShaveLegs")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("DatingAppUsers");
                });

            modelBuilder.Entity("Domain.Entities.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BodyPart")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathToPhoto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PhotoAlbumId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PhotoAlbumId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("Domain.Entities.PhotoAlbum", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DatingAppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DatingAppUserId")
                        .IsUnique()
                        .HasFilter("[DatingAppUserId] IS NOT NULL");

                    b.ToTable("PhotoAlbums");
                });

            modelBuilder.Entity("Domain.Entities.TelegramUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("AddedToAttachmentMenu")
                        .HasColumnType("bit");

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DatingAppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TelegramUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0b509923-6b5f-4880-a46f-09dac8683773"),
                            ChatId = 444343256L,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAdmin = false,
                            Username = "noncredistka"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Photo", b =>
                {
                    b.HasOne("Domain.Entities.PhotoAlbum", "PhotoAlbum")
                        .WithMany("Photos")
                        .HasForeignKey("PhotoAlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PhotoAlbum");
                });

            modelBuilder.Entity("Domain.Entities.PhotoAlbum", b =>
                {
                    b.HasOne("Domain.Entities.DatingAppUser", "DatingAppUser")
                        .WithOne("PhotoAlbum")
                        .HasForeignKey("Domain.Entities.PhotoAlbum", "DatingAppUserId");

                    b.Navigation("DatingAppUser");
                });

            modelBuilder.Entity("Domain.Entities.DatingAppUser", b =>
                {
                    b.Navigation("PhotoAlbum");
                });

            modelBuilder.Entity("Domain.Entities.PhotoAlbum", b =>
                {
                    b.Navigation("Photos");
                });
#pragma warning restore 612, 618
        }
    }
}
